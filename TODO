--- XML UI ----------------------------------

* Attributes, text leaf GUI widgets

* Max-depth under which you jump to a new root

--- Version control -------------------------

* Version should also be an IRef wrapper around VersionData, like View
  and Branch?

* Conflicts/merges!

* Reflog: See stash

* Pure immutable key/value store (add only) interface?

  * IRef contains a safe hash or a copy of the value, depending on
      which is smaller

  * addNew :: Value -> IRef Value
    deref :: IRef Value -> Value

  * Values have to contain IRefs to other values rather than direct
    refs in order to serialize properly, but otherwise they are used
    like pure values.

  * Circularity achieved via higher-level reference encoding

  * Revision control (Data.Rev.Change and Data.Rev.VersionMap) can use
    pure IRefs for object values

--- GC ------------------------

* Container ought to always be enumerable so that GC is possible

--- Code editor -----------------------------

* Interpret Tree as Code!
  * Scheme / Untyped Haskell
  * Run as you edit
  * Finally editing some code.. UI enhancements...

* Add typing:
  * Full type inference
  * Back-refs from all uses: When "x" changes its type, re-test all
    uses of "x" for validity, if invalid, insert tchorim
