* Clean up the Editor code to consistently use properties/labels or
  refs, and not a mishmash

  * Property is generic, cannot know the Db so it cannot convert:

    Property IO (DBRef a) -> Property IO a

    * Maybe wrap Ref (still needed for Binary instance) with Accessor
      instead of Property, that represents ability to read/write to
      that DB slot?  Also composable with pure labels, but can convert:

      Accessor (DBRef a) -> Accessor a

    * Everyone can use Accessor instead of DBRef for everything

* Make the tree editor useful:
  * Folding, max-depth under which you jump to a new root

  * Revision control

* Maybe need 'overwrite selection' in TextEdit so that I can have the
  "<new node>" be overwritten when you go on it?

  * Can I somehow show "<empty>" for empty text edits in a way that
    considers it a single char that's overwritten by any operation?

* Interpret Tree as Code!
  * Scheme / Untyped Haskell
  * Run as you edit
  * Finally editing some code.. UI enhancements...

* Add typing:
  * Full type inference
  * Back-refs from all uses: When "x" changes its type, re-test all
    uses of "x" for validity, if invalid, insert tchorim
