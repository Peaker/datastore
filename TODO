* Transactions to avoid intermediate versions

  * All the StoreRef stuff is based on the store being available for
    read/write. To create a widget, I want refs with read access, but
    then only WHEN I want to write to them, I want to create a
    transaction. That's too late to change the refs I have to another
    store.  Wrapping the widget creation with withTransaction is
    futile.
  * Can just have an ugly makeTransaction and applyTransaction, and so
    I can get a transaction store and add (>> applyTransaction) to the
    Widget.

  * For now just give up on transactions in the editor? I don't really
    have anything to "transact" yet.

* Explicit "branch" naming

  * Have right-hand-side show the named branches

  * Have a reflog too

  * Implicit name for all Undo edges (carry around the "current undo
    rev" which moves with the current rev to make sure there's just
    one tag per undo sequence)

* Folding, max-depth under which you jump to a new root

* Maybe need 'overwrite selection' in TextEdit so that I can have the
  "<new node>" be overwritten when you go on it?

  * Can I somehow show "<empty>" for empty text edits in a way that
    considers it a single char that's overwritten by any operation?

* Interpret Tree as Code!
  * Scheme / Untyped Haskell
  * Run as you edit
  * Finally editing some code.. UI enhancements...

* Add typing:
  * Full type inference
  * Back-refs from all uses: When "x" changes its type, re-test all
    uses of "x" for validity, if invalid, insert tchorim
