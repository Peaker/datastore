--- Version control -------------------------

* Conflicts/merges!

Base
|   \
A    1
|     \
B      2
|       \
C        3
|
Merge 1..3 -- 1..3 overrides in case of conflicts? How is this tagged
              in an easy-to-present way?  Conflicts = Base..C keys
              intersected with 1..3 keys

              Maybe in addition to what VersionMap caches, it can
              cache the conflicts too. A key is in conflict until it
              is overwritten again

|
Fix conflicts
|
...

  * UI

  * Problem: Merge granularity currently can only be store key-based,
    but it is more efficient to have keys contain stuff rather than
    refer to stuff (There's a per-key overhead)

    * Workaround: Just pay the overhead, use IRef for everything

    * Solution: Later, can have a Binary sub-class that can be used to
      divide data up into finer granularity

* Reflog branch (see TODO in there)

* Pure immutable key/value store (add only) interface?

  * IRef contains a safe hash or a copy of the value, depending on
      which is smaller

  * addNew :: Value -> IRef Value
    deref :: IRef Value -> Value

  * Values have to contain IRefs to other values rather than direct
    refs in order to serialize properly, but otherwise they are used
    like pure values.

  * Circularity achieved via higher-level reference encoding

  * Revision control (Data.Rev.Change and Data.Rev.VersionMap) can use
    pure IRefs for object values

--- XML UI ----------------------------------

* Attributes, text leaf GUI widgets

* Max-depth under which you jump to a new root

--- GC ------------------------

* Container ought to always be enumerable so that GC is possible

--- Code editor -----------------------------

* Interpret Tree as Code!
  * Scheme / Untyped Haskell
  * Run as you edit
  * Finally editing some code.. UI enhancements...

* Add typing:
  * Full type inference
  * Back-refs from all uses: When "x" changes its type, re-test all
    uses of "x" for validity, if invalid, insert tchorim
